@using patter_pal.Util;
@{
    ViewData["Title"] = "Home Page";
}

<div class="vh-100-no-footer d-flex flex-column align-items-center justify-content-center">
    <button id="micButton" type="submit" class="display-1 btn btn-outline-light rounded-circle">🎙</button>
    <div>
        <select class="form-select text-center" id="languageSelect">
            @foreach (var language in LanguageConstants.Languages)
            {
                <option value="@language.Key" selected="@(language.Key==LanguageConstants.DefaultLanguage)">@language.Value</option>
            }
        </select>
    </div>
    <p id="stateLabel" class="text-muted text-center">Ready to connect...</p>
</div>

@section Scripts {
    <script type="module">
        import { HOST_URL, htmlEscape } from './js/helpers.js';
        import { AudioRecognitionStreamer } from './js/audio_recognition.js';

        const micButton = document.getElementById('micButton');
        const stateLabel = document.getElementById('stateLabel');
        const languageSelect = document.getElementById('languageSelect');

        let audioRecStreamer;
        let socket;

        function isAudioStreamRunning() {
            return audioRecStreamer && socket?.readyState == WebSocket.OPEN;
        }

        function updateState() {
            const isRunning = isAudioStreamRunning();
            languageSelect.disabled = isRunning;

            if (socket) {
                switch (socket.readyState) {
                    case WebSocket.CLOSED:
                        stateLabel.innerHTML = "Closed";
                        break;
                    case WebSocket.CLOSING:
                        stateLabel.innerHTML = "Closing...";
                        break;
                    case WebSocket.CONNECTING:
                        stateLabel.innerHTML = "Connecting...";
                        break;
                    case WebSocket.OPEN:
                        stateLabel.innerHTML = "Open";
                        break;
                    default:
                        stateLabel.innerHTML = "Unknown WebSocket State: " + htmlEscape(socket.readyState);
                        break;
                }
            } else {
                stateLabel.innerHTML = "Ready to connect...";
            }
        }

        function stopStreaming() {
            audioRecStreamer?.stopRecording();
            socket?.close();
            socket = null;
            audioRecStreamer = null;
        }

        // --- Event Handlers --- //

        micButton.onclick = () => {
            if (audioRecStreamer) {
                audioRecStreamer.stopRecording();
                socket.close();
                socket = null;
                audioRecStreamer = null;
                return;
            }

            stateLabel.innerHTML = "Connecting";
            const connectionUrl = "wss://" + HOST_URL + "@AppConfig.SpeechWsEndpoint/" + languageSelect.value;
            socket = new WebSocket(connectionUrl);
            audioRecStreamer = new AudioRecognitionStreamer(socket, @AppConfig.RecordingBufferSize, @AppConfig.RecordingChunkTimeMs, @AppConfig.TargetSampleRate);

            socket.onopen = (event) => {
                // Start audio recording when the socket is ready
                audioRecStreamer.startRecording();
                updateState();
            };
            socket.onmessage = (event) => {
                console.log(event);
                console.log(event.data.DisplayText);
            };
            socket.onclose = updateState;
            socket.onerror = (event) => {
                stopStreaming();
                updateState();
            };
        };
    </script>
}


